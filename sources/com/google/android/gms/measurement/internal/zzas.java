package com.google.android.gms.measurement.internal;

import android.content.Context;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.TooltipCompatHandler;
import com.facebook.UserSettingsManager;
import com.facebook.internal.Utility;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzct;
import com.google.android.gms.internal.measurement.zzde;
import com.helpshift.conversation.domainmodel.ConversationController;
import com.helpshift.util.ErrorReportProvider;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@VisibleForTesting
/* compiled from: com.google.android.gms:play-services-measurement-impl@@18.0.0 */
public final class zzas {
    public static zzej<Long> zza = zza("measurement.ad_id_cache_time", 10000L, 10000L, zzav.zza);
    public static zzej<Long> zzaa = zza("measurement.upload.retry_time", 1800000L, 1800000L, zzbm.zza);
    public static zzej<Integer> zzab = zza("measurement.upload.retry_count", 6, 6, zzbp.zza);
    public static zzej<Long> zzac = zza("measurement.upload.max_queue_time", 2419200000L, 2419200000L, zzbo.zza);
    public static zzej<Integer> zzad = zza("measurement.lifetimevalue.max_currency_tracked", 4, 4, zzbr.zza);
    public static zzej<Integer> zzae = zza("measurement.audience.filter_result_max_count", 200, 200, zzbt.zza);
    public static zzej<Integer> zzaf = zza("measurement.upload.max_public_user_properties", 25, 25, (zzeh) null);
    public static zzej<Integer> zzag = zza("measurement.upload.max_event_name_cardinality", 500, 500, (zzeh) null);
    public static zzej<Integer> zzah = zza("measurement.upload.max_public_event_params", 25, 25, (zzeh) null);
    public static zzej<Long> zzai = zza("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, zzbs.zza);
    public static zzej<Boolean> zzaj;
    public static zzej<String> zzak = zza("measurement.test.string_flag", "---", "---", zzbu.zza);
    public static zzej<Long> zzal = zza("measurement.test.long_flag", -1L, -1L, zzbx.zza);
    public static zzej<Integer> zzam = zza("measurement.test.int_flag", -2, -2, zzbw.zza);
    public static zzej<Double> zzan;
    public static zzej<Integer> zzao = zza("measurement.experiment.max_ids", 50, 50, zzby.zza);
    public static zzej<Integer> zzap = zza("measurement.max_bundles_per_iteration", 100, 100, zzcb.zza);
    public static zzej<Boolean> zzaq;
    public static zzej<Boolean> zzar;
    public static zzej<Boolean> zzas;
    public static zzej<Boolean> zzat;
    public static zzej<Boolean> zzau;
    public static zzej<Boolean> zzav;
    public static zzej<Boolean> zzaw;
    public static zzej<Boolean> zzax;
    public static zzej<Boolean> zzay;
    public static zzej<Boolean> zzaz;
    public static zzej<Long> zzb;
    public static zzej<Boolean> zzba;
    public static zzej<Boolean> zzbb;
    public static zzej<Boolean> zzbc;
    public static zzej<Boolean> zzbd;
    public static zzej<Boolean> zzbe;
    public static zzej<Boolean> zzbf;
    public static zzej<Boolean> zzbg;
    public static zzej<Boolean> zzbh;
    public static zzej<Boolean> zzbi;
    public static zzej<Boolean> zzbj;
    public static zzej<Boolean> zzbk;
    public static zzej<Boolean> zzbl;
    public static zzej<Boolean> zzbm;
    public static zzej<Boolean> zzbn;
    public static zzej<Boolean> zzbo;
    public static zzej<Boolean> zzbp;
    public static zzej<Boolean> zzbq;
    public static zzej<Boolean> zzbr;
    public static zzej<Boolean> zzbs;
    public static zzej<Boolean> zzbt;
    public static zzej<Boolean> zzbu;
    public static zzej<Boolean> zzbv;
    public static zzej<Boolean> zzbw;
    public static zzej<Boolean> zzbx;
    public static zzej<Boolean> zzby;
    public static zzej<Boolean> zzbz;
    public static zzej<Long> zzc;
    public static zzej<Boolean> zzca;
    public static zzej<Boolean> zzcb;
    public static zzej<Boolean> zzcc;
    public static zzej<Long> zzcd;
    public static zzej<Boolean> zzce;
    public static zzej<Boolean> zzcf;
    public static zzej<Boolean> zzcg;
    public static zzej<Boolean> zzch;
    public static zzej<Boolean> zzci;
    public static zzej<Integer> zzcj = zza("measurement.service.storage_consent_support_version", 203590, 203590, zzdy.zza);
    public static zzej<Boolean> zzck;
    public static zzej<Boolean> zzcl;
    public static zzej<Boolean> zzcm;
    public static zzej<Boolean> zzcn;
    public static List<zzej<?>> zzco = Collections.synchronizedList(new ArrayList());
    public static Set<zzej<?>> zzcp = Collections.synchronizedSet(new HashSet());
    public static zzej<Boolean> zzcq;
    public static zzej<String> zzd = zza("measurement.config.url_scheme", Utility.URL_SCHEME, Utility.URL_SCHEME, zzbq.zza);
    public static zzej<String> zze = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzcd.zza);
    public static zzej<Integer> zzf = zza("measurement.upload.max_bundles", 100, 100, zzcm.zza);
    public static zzej<Integer> zzg = zza("measurement.upload.max_batch_size", 65536, 65536, zzcz.zza);
    public static zzej<Integer> zzh = zza("measurement.upload.max_bundle_size", 65536, 65536, zzdi.zza);
    public static zzej<Integer> zzi = zza("measurement.upload.max_events_per_bundle", 1000, 1000, zzdv.zza);
    public static zzej<Integer> zzj = zza("measurement.upload.max_events_per_day", 100000, 100000, zzef.zza);
    public static zzej<Integer> zzk = zza("measurement.upload.max_error_events_per_day", 1000, 1000, zzax.zza);
    public static zzej<Integer> zzl = zza("measurement.upload.max_public_events_per_day", 50000, 50000, zzaw.zza);
    public static zzej<Integer> zzm = zza("measurement.upload.max_conversions_per_day", 10000, 10000, zzaz.zza);
    public static zzej<Integer> zzn = zza("measurement.upload.max_realtime_events_per_day", 10, 10, zzay.zza);
    public static zzej<Integer> zzo = zza("measurement.store.max_stored_events_per_app", 100000, 100000, zzbb.zza);
    public static zzej<String> zzp = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzba.zza);
    public static zzej<Long> zzq = zza("measurement.upload.backoff_period", 43200000L, 43200000L, zzbd.zza);
    public static zzej<Long> zzr = zza("measurement.upload.window_interval", 3600000L, 3600000L, zzbc.zza);
    public static zzej<Long> zzs = zza("measurement.upload.interval", 3600000L, 3600000L, zzbf.zza);
    public static zzej<Long> zzt = zza("measurement.upload.realtime_upload_interval", 10000L, 10000L, zzbe.zza);
    public static zzej<Long> zzu = zza("measurement.upload.debug_upload_interval", 1000L, 1000L, zzbg.zza);
    public static zzej<Long> zzv = zza("measurement.upload.minimum_delay", 500L, 500L, zzbj.zza);
    public static zzej<Long> zzw;
    public static zzej<Long> zzx;
    public static zzej<Long> zzy;
    public static zzej<Long> zzz;

    static {
        Long valueOf = Long.valueOf(ErrorReportProvider.BATCH_TIME);
        zzb = zza("measurement.monitoring.sample_period_millis", valueOf, valueOf, zzau.zza);
        zzc = zza("measurement.config.cache_time", valueOf, 3600000L, zzbh.zza);
        Long valueOf2 = Long.valueOf(ConversationController.ACTIVE_ISSUE_NOTIFICATION_COUNT_TIMEOUT);
        zzw = zza("measurement.alarm_manager.minimum_interval", valueOf2, valueOf2, zzbi.zza);
        zzx = zza("measurement.upload.stale_data_deletion_interval", valueOf, valueOf, zzbl.zza);
        Long valueOf3 = Long.valueOf(UserSettingsManager.TIMEOUT_7D);
        zzy = zza("measurement.upload.refresh_blacklisted_config_interval", valueOf3, valueOf3, zzbk.zza);
        Long valueOf4 = Long.valueOf(TooltipCompatHandler.HOVER_HIDE_TIMEOUT_MS);
        zzz = zza("measurement.upload.initial_upload_delay_time", valueOf4, valueOf4, zzbn.zza);
        Boolean bool = Boolean.FALSE;
        zzaj = zza("measurement.test.boolean_flag", bool, bool, zzbv.zza);
        Double valueOf5 = Double.valueOf(-3.0d);
        zzan = zza("measurement.test.double_flag", valueOf5, valueOf5, zzbz.zza);
        Boolean bool2 = Boolean.FALSE;
        zzaq = zza("measurement.validation.internal_limits_internal_event_params", bool2, bool2, zzca.zza);
        Boolean bool3 = Boolean.TRUE;
        zzar = zza("measurement.collection.firebase_global_collection_flag_enabled", bool3, bool3, zzcc.zza);
        Boolean bool4 = Boolean.TRUE;
        zzas = zza("measurement.collection.efficient_engagement_reporting_enabled_2", bool4, bool4, zzcf.zza);
        Boolean bool5 = Boolean.FALSE;
        zzat = zza("measurement.collection.redundant_engagement_removal_enabled", bool5, bool5, zzce.zza);
        Boolean bool6 = Boolean.TRUE;
        zzau = zza("measurement.client.freeride_engagement_fix", bool6, bool6, zzch.zza);
        Boolean bool7 = Boolean.TRUE;
        zzav = zza("measurement.collection.log_event_and_bundle_v2", bool7, bool7, zzcg.zza);
        Boolean bool8 = Boolean.FALSE;
        zzaw = zza("measurement.quality.checksum", bool8, bool8, (zzeh) null);
        Boolean bool9 = Boolean.TRUE;
        zzax = zza("measurement.sdk.dynamite.allow_remote_dynamite3", bool9, bool9, zzcj.zza);
        Boolean bool10 = Boolean.TRUE;
        zzay = zza("measurement.sdk.collection.validate_param_names_alphabetical", bool10, bool10, zzci.zza);
        Boolean bool11 = Boolean.FALSE;
        zzaz = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", bool11, bool11, zzcl.zza);
        Boolean bool12 = Boolean.FALSE;
        zzba = zza("measurement.audience.refresh_event_count_filters_timestamp", bool12, bool12, zzck.zza);
        Boolean bool13 = Boolean.FALSE;
        zzbb = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", bool13, bool13, zzcn.zza);
        Boolean bool14 = Boolean.TRUE;
        zzbc = zza("measurement.sdk.collection.retrieve_deeplink_from_bow_2", bool14, bool14, zzcp.zza);
        Boolean bool15 = Boolean.TRUE;
        zzbd = zza("measurement.sdk.collection.last_deep_link_referrer2", bool15, bool15, zzco.zza);
        Boolean bool16 = Boolean.FALSE;
        zzbe = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", bool16, bool16, zzcr.zza);
        Boolean bool17 = Boolean.FALSE;
        zzbf = zza("measurement.sdk.collection.last_gclid_from_referrer2", bool17, bool17, zzcq.zza);
        Boolean bool18 = Boolean.TRUE;
        zzbg = zza("measurement.sdk.collection.enable_extend_user_property_size", bool18, bool18, zzct.zza);
        Boolean bool19 = Boolean.FALSE;
        zzbh = zza("measurement.upload.file_lock_state_check", bool19, bool19, zzcs.zza);
        Boolean bool20 = Boolean.FALSE;
        zzbi = zza("measurement.ga.ga_app_id", bool20, bool20, zzcv.zza);
        Boolean bool21 = Boolean.FALSE;
        zzbj = zza("measurement.lifecycle.app_in_background_parameter", bool21, bool21, zzcu.zza);
        Boolean bool22 = Boolean.FALSE;
        zzbk = zza("measurement.integration.disable_firebase_instance_id", bool22, bool22, zzcx.zza);
        Boolean bool23 = Boolean.FALSE;
        zzbl = zza("measurement.lifecycle.app_backgrounded_engagement", bool23, bool23, zzcw.zza);
        Boolean bool24 = Boolean.FALSE;
        zzbm = zza("measurement.collection.service.update_with_analytics_fix", bool24, bool24, zzcy.zza);
        Boolean bool25 = Boolean.FALSE;
        zzbn = zza("measurement.service.use_appinfo_modified", bool25, bool25, zzdb.zza);
        Boolean bool26 = Boolean.TRUE;
        zzbo = zza("measurement.client.firebase_feature_rollout.v1.enable", bool26, bool26, zzda.zza);
        Boolean bool27 = Boolean.TRUE;
        zzbp = zza("measurement.client.sessions.check_on_reset_and_enable2", bool27, bool27, zzdd.zza);
        Boolean bool28 = Boolean.FALSE;
        zzbq = zza("measurement.scheduler.task_thread.cleanup_on_exit", bool28, bool28, zzdc.zza);
        Boolean bool29 = Boolean.FALSE;
        zzbr = zza("measurement.upload.file_truncate_fix", bool29, bool29, zzdf.zza);
        Boolean bool30 = Boolean.FALSE;
        zzbs = zza("measurement.sdk.referrer.delayed_install_referrer_api", bool30, bool30, zzde.zza);
        Boolean bool31 = Boolean.TRUE;
        zzbt = zza("measurement.sdk.screen.disabling_automatic_reporting", bool31, bool31, zzdh.zza);
        Boolean bool32 = Boolean.TRUE;
        zzbu = zza("measurement.sdk.screen.manual_screen_view_logging", bool32, bool32, zzdg.zza);
        Boolean bool33 = Boolean.FALSE;
        zzcq = zza("measurement.collection.synthetic_data_mitigation", bool33, bool33, zzdj.zza);
        Boolean bool34 = Boolean.TRUE;
        zzbv = zza("measurement.service.configurable_service_limits", bool34, bool34, zzdl.zza);
        Boolean bool35 = Boolean.TRUE;
        zzbw = zza("measurement.client.configurable_service_limits", bool35, bool35, zzdk.zza);
        Boolean bool36 = Boolean.TRUE;
        zzbx = zza("measurement.androidId.delete_feature", bool36, bool36, zzdn.zza);
        Boolean bool37 = Boolean.TRUE;
        zzby = zza("measurement.client.global_params", bool37, bool37, zzdm.zza);
        Boolean bool38 = Boolean.TRUE;
        zzbz = zza("measurement.service.global_params", bool38, bool38, zzdp.zza);
        Boolean bool39 = Boolean.TRUE;
        zzca = zza("measurement.service.global_params_in_payload", bool39, bool39, zzdo.zza);
        Boolean bool40 = Boolean.TRUE;
        zzcb = zza("measurement.client.string_reader", bool40, bool40, zzdr.zza);
        Boolean bool41 = Boolean.TRUE;
        zzcc = zza("measurement.sdk.attribution.cache", bool41, bool41, zzdq.zza);
        zzcd = zza("measurement.sdk.attribution.cache.ttl", valueOf3, valueOf3, zzdt.zza);
        Boolean bool42 = Boolean.TRUE;
        zzce = zza("measurement.service.database_return_empty_collection", bool42, bool42, zzds.zza);
        Boolean bool43 = Boolean.TRUE;
        zzcf = zza("measurement.service.ssaid_removal", bool43, bool43, zzdu.zza);
        Boolean bool44 = Boolean.TRUE;
        zzcg = zza("measurement.client.consent_state_v1", bool44, bool44, zzdx.zza);
        Boolean bool45 = Boolean.TRUE;
        zzch = zza("measurement.client.3p_consent_state_v1", bool45, bool45, zzdw.zza);
        Boolean bool46 = Boolean.FALSE;
        zzci = zza("measurement.service.consent_state_v1_W36", bool46, bool46, zzdz.zza);
        Boolean bool47 = Boolean.TRUE;
        zzck = zza("measurement.client.ad_impression", bool47, bool47, zzeb.zza);
        Boolean bool48 = Boolean.TRUE;
        zzcl = zza("measurement.service.ad_impression", bool48, bool48, zzea.zza);
        Boolean bool49 = Boolean.TRUE;
        zzcm = zza("measurement.service.separate_public_internal_event_blacklisting", bool49, bool49, zzed.zza);
        Boolean bool50 = Boolean.FALSE;
        zzcn = zza("measurement.service.directly_maybe_log_error_events", bool50, bool50, zzec.zza);
    }

    public static Map<String, String> zza(Context context) {
        zzct zza2 = zzct.zza(context.getContentResolver(), zzde.zza("com.google.android.gms.measurement"));
        return zza2 == null ? Collections.emptyMap() : zza2.zza();
    }

    @VisibleForTesting
    public static <V> zzej<V> zza(@Nullable String str, @Nullable V v, @Nullable V v2, @Nullable zzeh<V> zzeh) {
        zzej zzej = new zzej(str, v, v2, zzeh);
        zzco.add(zzej);
        return zzej;
    }
}
